// <auto-generated />
using System;
using AppCommonServices.Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppCommonServices.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PreguntaFrecuenteRespuestaID")
                        .HasComment("Identificador unico de la respuesta de la pregunta frecuente");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Descripcion")
                        .HasComment("Texto de la respuesta");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Activa")
                        .HasComment("Indica si la respuesta esta habilitado o no para su visibilidad. Valores 0=No Activa, 1=Activa y es requerida.");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("Posicion")
                        .HasComment("Numero de la posicion para ordenamiento en la que se mostrara las respuestas. Valores debe ser mayor que 0 y es requerido.");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PreguntaFrecuenteID")
                        .HasComment("Identificador de la pregunta a la que pertence la respuesta. Es llave foranea y es requerida.");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("CatPreguntaFrecuenteRespuesta", null, t =>
                        {
                            t.HasComment("Tabla donde estan las respuestas a las preguntas de la seccion de preguntas y respuestas.");
                        });
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeccionPreguntaFrecuenteID")
                        .HasComment("Identificador unico de la seccion de preguntas frecuentes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Activa")
                        .HasComment("Indica si la seccion de preguntas frecuentes esta habilitado o no para su visibilidad. Valores 0=No Activa, 1=Activa y es requerida.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Titulo")
                        .HasComment("Titulo de la seccion de preguntas frecuentes");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("Posicion")
                        .HasComment("Numero de la posicion para ordenamiento en la que se mostrara la seccion de preguntas frecuentes. Valores debe ser mayor que 0 y es requerido.");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("UrlImagen")
                        .HasComment("Url donde esta localizado la imágen de la seccion");

                    b.HasKey("Id");

                    b.ToTable("CatSeccionPreguntaFrecuente", null, t =>
                        {
                            t.HasComment("Tabla donde estan las secciones de preguntas y respuestas. Tabla principal del dominio de Preguntas Frecuentes.");
                        });
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PreguntaFrecuenteID")
                        .HasComment("Identificador unico de la pregunta frecuente");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Descripcion")
                        .HasComment("Texto de la pregunta");

                    b.Property<Guid>("FaqId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeccionPreguntaFrecuenteID")
                        .HasComment("Identificador de la seccion de preguntas frecuentes a la que pertence la pregunta. Es llave foranea y es requerida.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Activa")
                        .HasComment("Indica si la pregunta esta habilitado o no para su visibilidad. Valores 0=No Activa, 1=Activa y es requerida.");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("Posicion")
                        .HasComment("Numero de la posicion para ordenamiento en la que se mostrara las preguntas. Valores debe ser mayor que 0 y es requerido.");

                    b.HasKey("Id");

                    b.HasIndex("FaqId");

                    b.ToTable("CatPreguntaFrecuente", null, t =>
                        {
                            t.HasComment("Tabla donde estan las pregutas de la seccion de preguntas y respuestas.");
                        });
                });

            modelBuilder.Entity("AppCommonServices.Domain.Feedback.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BuzonSugerenciaId")
                        .HasComment("Identificador de la sugerencia");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(850)
                        .HasColumnType("nvarchar(850)")
                        .HasColumnName("Comentarios")
                        .HasComment("Texto de la sugerencia");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UsuarioId")
                        .HasComment("Identificador del usuario");

                    b.HasKey("Id");

                    b.ToTable("BuzonSugerencia", null, t =>
                        {
                            t.HasComment("Tabla donde estan las sugerencias del usuario de la app móvil de Oxxo Gas.");
                        });
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Answer", b =>
                {
                    b.HasOne("AppCommonServices.Domain.Faq.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppCommonServices.Domain.Common.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<Guid>("AnswerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("CREATED_BY")
                                .HasComment("Auditoria. Usuario que creo el registro.");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CREATED_AT")
                                .HasComment("Auditoria. Fecha en la que se creo el registro.");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("UPDATED_BY")
                                .HasComment("Auditoria. Usuario que modifico el registro.");

                            b1.Property<DateTimeOffset?>("UpdatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("UPDATED_AT")
                                .HasComment("Auditoria. Fecha en la que se modifico el registro.");

                            b1.HasKey("AnswerId");

                            b1.ToTable("CatPreguntaFrecuenteRespuesta");

                            b1.WithOwner()
                                .HasForeignKey("AnswerId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Faq", b =>
                {
                    b.OwnsOne("AppCommonServices.Domain.Common.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<Guid>("FaqId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("CREATED_BY")
                                .HasComment("Auditoria. Usuario que creo el registro.");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CREATED_AT")
                                .HasComment("Auditoria. Fecha en la que se creo el registro.");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("UPDATED_BY")
                                .HasComment("Auditoria. Usuario que modifico el registro.");

                            b1.Property<DateTimeOffset?>("UpdatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("UPDATED_AT")
                                .HasComment("Auditoria. Fecha en la que se modifico el registro.");

                            b1.HasKey("FaqId");

                            b1.ToTable("CatSeccionPreguntaFrecuente");

                            b1.WithOwner()
                                .HasForeignKey("FaqId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Question", b =>
                {
                    b.HasOne("AppCommonServices.Domain.Faq.Entities.Faq", null)
                        .WithMany("Questions")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppCommonServices.Domain.Common.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<Guid>("QuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("CREATED_BY")
                                .HasComment("Auditoria. Usuario que creo el registro.");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CREATED_AT")
                                .HasComment("Auditoria. Fecha en la que se creo el registro.");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("UPDATED_BY")
                                .HasComment("Auditoria. Usuario que modifico el registro.");

                            b1.Property<DateTimeOffset?>("UpdatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("UPDATED_AT")
                                .HasComment("Auditoria. Fecha en la que se modifico el registro.");

                            b1.HasKey("QuestionId");

                            b1.ToTable("CatPreguntaFrecuente");

                            b1.WithOwner()
                                .HasForeignKey("QuestionId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("AppCommonServices.Domain.Feedback.Entities.Feedback", b =>
                {
                    b.OwnsOne("AppCommonServices.Domain.Common.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<Guid>("FeedbackId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("CREATED_BY")
                                .HasComment("Auditoria. Usuario que creo el registro.");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CREATED_AT")
                                .HasComment("Auditoria. Fecha en la que se creo el registro.");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("UPDATED_BY")
                                .HasComment("Auditoria. Usuario que modifico el registro.");

                            b1.Property<DateTimeOffset?>("UpdatedOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("UPDATED_AT")
                                .HasComment("Auditoria. Fecha en la que se modifico el registro.");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("BuzonSugerencia");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Faq", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AppCommonServices.Domain.Faq.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
